{"version":3,"sources":["logo.svg","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","addTodo","event","preventDefault","data","target","newTodo","taskTitle","value","date","time","AssignUser","state","todoList","push","setState","deleteTodo","splice","console","log","this","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","name","Button","className","ListGroup","map","task","index","Item","variant","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kNAAe,I,oECoFAA,E,kDA/EX,aAAe,IAAD,8BACV,gBAMJC,QAAU,SAACC,GACPA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OACfC,EAAU,CACNC,UAAWH,EAAKG,UAAUC,MAC1BC,KAAML,EAAKK,KAAKD,MAChBE,KAAMN,EAAKM,KAAKF,MAChBG,WAAWP,EAAKO,WAAWH,OAKnC,EAAKI,MAAMC,SAASC,KAAKR,GAEzB,EAAKS,SAAS,CACVF,SAAU,EAAKD,MAAMC,YAvBf,EA2BdG,WAAa,SAACd,GAEV,EAAKU,MAAMC,SAASI,OAAOf,EAAMG,OAAOG,MAAO,GAC/C,EAAKO,SAAS,CACVF,SAAU,EAAKD,MAAMC,YA7BzB,EAAKD,MAAQ,CACTC,SAAU,IAHJ,E,0CAkCd,WAAU,IAAD,OAEL,OADAK,QAAQC,IAAIC,KAAKR,MAAMC,UAEnB,qCACI,eAACQ,EAAA,EAAD,CAAMC,SAAUF,KAAKnB,QAArB,UACI,eAACoB,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,gCACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,eAAeC,KAAK,iBAE9D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,aAAaC,KAAK,YAE5D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,gBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,yBACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,iBAAiBC,KAAK,SAC5D,eAACR,EAAA,EAAKE,MAAN,CAAYC,UAAU,qBAAtB,UACI,cAACH,EAAA,EAAKI,MAAN,0BACA,cAACJ,EAAA,EAAKK,QAAN,CAAcC,KAAK,OAAOC,YAAY,kBAAkBC,KAAK,qBAGrE,cAACC,EAAA,EAAD,CAAQH,KAAK,SAASI,UAAU,kBAAhC,qBAKJ,cAACC,EAAA,EAAD,UAEQZ,KAAKR,MAAMC,SAASoB,KAAI,SAACC,EAAMC,GAC3B,OACI,eAACH,EAAA,EAAUI,KAAX,CAA4BC,QAAQ,UAApC,UACEH,EAAKvB,WADP,0BAC0CuB,EAAK3B,UAD/C,QAC+D2B,EAAKxB,KADpE,WACkFwB,EAAKzB,KACnF,cAACqB,EAAA,EAAD,CAAQH,KAAK,SAASU,QAAQ,SAASC,QAAS,EAAKtB,WAAYR,MAAO2B,EAAxE,sBAFiBA,e,GAjEhCI,a,MCeNC,MAZf,WAGA,OACE,sBAAKT,UAAU,MAAf,UACF,4CACA,cAAC,EAAD,QCDeU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.07672f9c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {Component} from \"react\";\r\nimport {Form, Button, ListGroup} from \"react-bootstrap\";\r\n\r\n\r\nclass Header extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            todoList: [] // default empty array\r\n        }\r\n    }\r\n    // addTodo: add a new task inside the state\r\n    addTodo = (event) => {\r\n        event.preventDefault(); // stop default behaviour\r\n        //console.log(event.target.taskTitle.value);\r\n        const data = event.target,\r\n            newTodo = {\r\n                taskTitle: data.taskTitle.value,\r\n                date: data.date.value,\r\n                time: data.time.value,\r\n                AssignUser:data.AssignUser.value,\r\n\r\n            }\r\n        //console.log(newTodo);\r\n        // updating the array but not re-rendering\r\n        this.state.todoList.push(newTodo);\r\n        // updating state and re-render\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    // delete todo from the array\r\n    deleteTodo = (event) => {\r\n        // splice(indexNumber, howmanyTodelete)\r\n        this.state.todoList.splice(event.target.value, 1)\r\n        this.setState({\r\n            todoList: this.state.todoList\r\n        })\r\n    }\r\n    render() {\r\n        console.log(this.state.todoList)\r\n        return (\r\n            <>\r\n                <Form onSubmit={this.addTodo}>\r\n                    <Form.Group controlId=\"formBasicTaskTitle\">\r\n                        <Form.Label>Task Description:</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Enter A Task\" name=\"taskTitle\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicDate\">\r\n                        <Form.Label>Task date:</Form.Label>\r\n                        <Form.Control type=\"date\" placeholder=\"mm/dd/yyyy\" name=\"date\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formBasicTime\">\r\n                        <Form.Label>Task Time:</Form.Label>\r\n                        <Form.Control type=\"time\" placeholder=\"Enter the Time\" name=\"time\" />\r\n                        <Form.Group controlId=\"formBasicTaskTitle\">\r\n                            <Form.Label>Assgn User:</Form.Label>\r\n                            <Form.Control type=\"text\" placeholder=\"Enter User Name\" name=\"AssignUser\" />\r\n                        </Form.Group>\r\n                    </Form.Group>\r\n                    <Button type=\"submit\" className=\"btn btn-success\">\r\n                        Add+\r\n                    </Button>\r\n                </Form>\r\n\r\n                <ListGroup>\r\n                    {\r\n                        this.state.todoList.map((task, index) => {\r\n                            return (\r\n                                <ListGroup.Item key={index} variant=\"success\">\r\n                                 {task.AssignUser} you have a task for   {task.taskTitle}  at {task.time}, Date: {task.date}\r\n                                    <Button type=\"button\" variant=\"danger\" onClick={this.deleteTodo} value={index}>\r\n                                        Delete\r\n                                    </Button>\r\n                                </ListGroup.Item>\r\n                            )\r\n                        })\r\n                    }\r\n                </ListGroup>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import logo from './logo.svg';\nimport './App.css';\n\nimport Header from './components/Header';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//bootstrap css\n\nfunction App(){\n\n\nreturn (\n  <div className=\"App\">\n<h1>Task maker</h1>\n<Header/>\n\n  \n  </div>\n);\n}\nexport default App;\n     \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}